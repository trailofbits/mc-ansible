

# DigitalOcean Playbook
---
- name: DigitalOcean
  hosts: localhost
  connection: local
  gather_facts: False
  
  tasks:

  - name: Include the variables for droplet creation
    include_vars: vars/droplet.yml

  - name: Remove existing SSH key
    digital_ocean_sshkey:
      state: absent
      name: "{{ ssh_key_name }}"
      ssh_pub_key: "{{ droplet_ssh_key }}"
      oauth_token: "{{ digital_ocean_api_token }}"

  - name: Upload SSH key
    digital_ocean_sshkey:
      state: present
      name: "{{ ssh_key_name }}"
      ssh_pub_key: "{{ droplet_ssh_key }}"
      oauth_token: "{{ digital_ocean_api_token }}"
    register: do_ssh_key
  
  - name: Create Droplet
    digital_ocean_droplet:
      state: present
      name: "{{ droplet_name }}"
      oauth_token: "{{ digital_ocean_api_token }}"
      size: "{{ droplet_size }}"
      region: "{{ droplet_region }}"
      image: "{{ droplet_image }}"
      ssh_keys: "{{ do_ssh_key.id }}"
      unique_name: true
      wait_timeout: 300
      tags:
        - Ansible:Manticore
    register: droplet_info

  - name: Add new instance to host group
    add_host: hostname={{ droplet_info.droplet.ip_address }} groupname=digital_ocean_droplet

  - name: Wait for SSH to come up
    wait_for: host={{ droplet_info.droplet.ip_address }} port=22 delay=10 timeout=60 state=started

- name: Configure manticore instance
  hosts: digital_ocean_droplet
  remote_user: root
  gather_facts: False

  tasks:

    - name: include ansible / manticore vars
      include_vars: vars/ansible.yml

    - name: Create a user with sudo privileges
      user:
        name: "{{ remote_uname }}"
        state: present
        shell: /bin/bash
        groups: sudo

    - name: Set authorized key with id_rsa.pub home file
      authorized_key:
        user: "{{ remote_uname }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_ed25519.pub') }}"

    - name: Allow run commands as root with dropletuser
      shell: "echo '%sudo ALL=NOPASSWD: ALL' >> /etc/sudoers"

    - name: Install pip on remote droplet
      become: yes
      apt:
        name: python3-pip 
        state: present
        update_cache: yes

    - name: Install manticore on remote droplet
      pip: 
        name: manticore[native]

- name: Continue configuration as specified user
  hosts: digital_ocean_droplet
  remote_user: "{{ remote_uname }}"
  gather_facts: False

  tasks:
    
    - set_fact:
        remote_user: "{{ remote_uname }}"

    - debug: 
        msg: Remote user is "{{ remote_user }}"

    - name: Copy cwd to remote droplet
      become: yes
      become_user: "{{ remote_uname }}"
      synchronize: 
        src: "{{ working_dir }}"
        dest: "/home/{{ remote_uname }}/"
        dirs: yes
        mode: push

    - name: Watch target script output (tail)
      include_role:
        name: long_run
      vars:
        long_run_title: Manticore run
        long_run_output_path: "/home/{{ remote_uname }}/{{ manticore_env }}"
        long_run_output_file: manticore_run.log
        long_run_path: "/home/{{ remote_uname }}/{{ manticore_env }}"
        long_run_cmd: "{{ main_cmd }} /home/{{ remote_uname }}/{{ manticore_script }}"
        long_run_timeout: 600
        long_run_poll: 1
      tags: [print_action]

   #- name: Save logs
   #  local_action: copy content={{ log_output }} dest={{ logfile }}

    - name: Fetch manticore results from remote server
      synchronize:
        rsync_path: "sudo rsync"
        mode: pull
        src:  "/home/{{ remote_uname }}/{{ manticore_env }}/."
        dest: "{{ working_dir }}/{{ manticore_env }}/"
        recursive: yes
